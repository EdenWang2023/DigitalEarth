/**
 * @license
 * Cesium - https://github.com/CesiumGS/cesium
 * Version 1.96
 *
 * Copyright 2011-2022 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/CesiumGS/cesium/blob/main/LICENSE.md for full licensing details.
 */
define(["exports","./Transforms-99c89742","./Matrix4-d3db9505","./Check-436535f3","./ComponentDatatype-46a1cf7a","./defined-b681f02d","./EllipseGeometryLibrary-b010fa13","./Rectangle-0610a1c7","./GeometryAttribute-ef6ca9ab","./GeometryAttributes-18ccc0d6","./GeometryInstance-458833d1","./GeometryOffsetAttribute-3e5f3e97","./GeometryPipeline-7151dba5","./IndexDatatype-1b44a4e6","./Math-5b6faca9","./VertexFormat-1359575c"],(function(t,e,i,n,r,o,a,s,l,u,m,c,p,y,d,f){"use strict";const A=new i.Cartesian3,x=new i.Cartesian3,h=new i.Cartesian3,g=new i.Cartesian3,_=new i.Cartesian2,b=new i.Matrix3,C=new i.Matrix3,w=new e.Quaternion,M=new i.Cartesian3,E=new i.Cartesian3,I=new i.Cartesian3,T=new i.Cartographic,G=new i.Cartesian3,N=new i.Cartesian2,P=new i.Cartesian2;function v(t,n,s){const m=n.vertexFormat,p=n.center,y=n.semiMajorAxis,d=n.semiMinorAxis,f=n.ellipsoid,g=n.stRotation,v=s?t.length/3*2:t.length/3,V=n.shadowVolume,F=m.st?new Float32Array(2*v):void 0,D=m.normal?new Float32Array(3*v):void 0,O=m.tangent?new Float32Array(3*v):void 0,S=m.bitangent?new Float32Array(3*v):void 0,L=V?new Float32Array(3*v):void 0;let R=0,j=M,k=E,z=I;const B=new e.GeographicProjection(f),Y=B.project(f.cartesianToCartographic(p,T),G),H=f.scaleToGeodeticSurface(p,A);f.geodeticSurfaceNormal(H,H);let U=b,Q=C;if(0!==g){let t=e.Quaternion.fromAxisAngle(H,g,w);U=i.Matrix3.fromQuaternion(t,U),t=e.Quaternion.fromAxisAngle(H,-g,w),Q=i.Matrix3.fromQuaternion(t,Q)}else U=i.Matrix3.clone(i.Matrix3.IDENTITY,U),Q=i.Matrix3.clone(i.Matrix3.IDENTITY,Q);const W=i.Cartesian2.fromElements(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,N),J=i.Cartesian2.fromElements(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,P);let q=t.length;const Z=s?q:0,K=Z/3*2;for(let e=0;e<q;e+=3){const n=e+1,r=e+2,o=i.Cartesian3.fromArray(t,e,A);if(m.st){const t=i.Matrix3.multiplyByVector(U,o,x),e=B.project(f.cartesianToCartographic(t,T),h);i.Cartesian3.subtract(e,Y,e),_.x=(e.x+y)/(2*y),_.y=(e.y+d)/(2*d),W.x=Math.min(_.x,W.x),W.y=Math.min(_.y,W.y),J.x=Math.max(_.x,J.x),J.y=Math.max(_.y,J.y),s&&(F[R+K]=_.x,F[R+1+K]=_.y),F[R++]=_.x,F[R++]=_.y}(m.normal||m.tangent||m.bitangent||V)&&(j=f.geodeticSurfaceNormal(o,j),V&&(L[e+Z]=-j.x,L[n+Z]=-j.y,L[r+Z]=-j.z),(m.normal||m.tangent||m.bitangent)&&((m.tangent||m.bitangent)&&(k=i.Cartesian3.normalize(i.Cartesian3.cross(i.Cartesian3.UNIT_Z,j,k),k),i.Matrix3.multiplyByVector(Q,k,k)),m.normal&&(D[e]=j.x,D[n]=j.y,D[r]=j.z,s&&(D[e+Z]=-j.x,D[n+Z]=-j.y,D[r+Z]=-j.z)),m.tangent&&(O[e]=k.x,O[n]=k.y,O[r]=k.z,s&&(O[e+Z]=-k.x,O[n+Z]=-k.y,O[r+Z]=-k.z)),m.bitangent&&(z=i.Cartesian3.normalize(i.Cartesian3.cross(j,k,z),z),S[e]=z.x,S[n]=z.y,S[r]=z.z,s&&(S[e+Z]=z.x,S[n+Z]=z.y,S[r+Z]=z.z))))}if(m.st){q=F.length;for(let t=0;t<q;t+=2)F[t]=(F[t]-W.x)/(J.x-W.x),F[t+1]=(F[t+1]-W.y)/(J.y-W.y)}const X=new u.GeometryAttributes;if(m.position){const e=a.EllipseGeometryLibrary.raisePositionsToHeight(t,n,s);X.position=new l.GeometryAttribute({componentDatatype:r.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:e})}if(m.st&&(X.st=new l.GeometryAttribute({componentDatatype:r.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:F})),m.normal&&(X.normal=new l.GeometryAttribute({componentDatatype:r.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:D})),m.tangent&&(X.tangent=new l.GeometryAttribute({componentDatatype:r.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:O})),m.bitangent&&(X.bitangent=new l.GeometryAttribute({componentDatatype:r.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:S})),V&&(X.extrudeDirection=new l.GeometryAttribute({componentDatatype:r.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:L})),s&&o.defined(n.offsetAttribute)){let t=new Uint8Array(v);if(n.offsetAttribute===c.GeometryOffsetAttribute.TOP)t=t.fill(1,0,v/2);else{const e=n.offsetAttribute===c.GeometryOffsetAttribute.NONE?0:1;t=t.fill(e)}X.applyOffset=new l.GeometryAttribute({componentDatatype:r.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:t})}return X}function V(t){const e=new Array(t*(t+1)*12-6);let i,n,r,o,a,s=0;for(i=0,r=1,o=0;o<3;o++)e[s++]=r++,e[s++]=i,e[s++]=r;for(o=2;o<t+1;++o){for(r=o*(o+1)-1,i=(o-1)*o-1,e[s++]=r++,e[s++]=i,e[s++]=r,n=2*o,a=0;a<n-1;++a)e[s++]=r,e[s++]=i++,e[s++]=i,e[s++]=r++,e[s++]=i,e[s++]=r;e[s++]=r++,e[s++]=i,e[s++]=r}for(n=2*t,++r,++i,o=0;o<n-1;++o)e[s++]=r,e[s++]=i++,e[s++]=i,e[s++]=r++,e[s++]=i,e[s++]=r;for(e[s++]=r,e[s++]=i++,e[s++]=i,e[s++]=r++,e[s++]=i++,e[s++]=i,++i,o=t-1;o>1;--o){for(e[s++]=i++,e[s++]=i,e[s++]=r,n=2*o,a=0;a<n-1;++a)e[s++]=r,e[s++]=i++,e[s++]=i,e[s++]=r++,e[s++]=i,e[s++]=r;e[s++]=i++,e[s++]=i++,e[s++]=r++}for(o=0;o<3;o++)e[s++]=i++,e[s++]=i,e[s++]=r;return e}let F=new i.Cartesian3;const D=new e.BoundingSphere,O=new e.BoundingSphere;function S(t){const n=t.center,s=t.ellipsoid,d=t.semiMajorAxis;let f=i.Cartesian3.multiplyByScalar(s.geodeticSurfaceNormal(n,A),t.height,A);D.center=i.Cartesian3.add(n,f,D.center),D.radius=d,f=i.Cartesian3.multiplyByScalar(s.geodeticSurfaceNormal(n,f),t.extrudedHeight,f),O.center=i.Cartesian3.add(n,f,O.center),O.radius=d;const C=a.EllipseGeometryLibrary.computeEllipsePositions(t,!0,!0),F=C.positions,S=C.numPts,L=C.outerPositions,R=e.BoundingSphere.union(D,O),j=v(F,t,!0);let k=V(S);const z=k.length;k.length=2*z;const B=F.length/3;for(let t=0;t<z;t+=3)k[t+z]=k[t+2]+B,k[t+1+z]=k[t+1]+B,k[t+2+z]=k[t]+B;const Y=y.IndexDatatype.createTypedArray(2*B/3,k),H=new l.Geometry({attributes:j,indices:Y,primitiveType:l.PrimitiveType.TRIANGLES}),U=function(t,n){const a=n.vertexFormat,s=n.center,m=n.semiMajorAxis,p=n.semiMinorAxis,y=n.ellipsoid,d=n.height,f=n.extrudedHeight,C=n.stRotation,v=t.length/3*2,V=new Float64Array(3*v),F=a.st?new Float32Array(2*v):void 0,D=a.normal?new Float32Array(3*v):void 0,O=a.tangent?new Float32Array(3*v):void 0,S=a.bitangent?new Float32Array(3*v):void 0,L=n.shadowVolume,R=L?new Float32Array(3*v):void 0;let j=0,k=M,z=E,B=I;const Y=new e.GeographicProjection(y),H=Y.project(y.cartesianToCartographic(s,T),G),U=y.scaleToGeodeticSurface(s,A);y.geodeticSurfaceNormal(U,U);const Q=e.Quaternion.fromAxisAngle(U,C,w),W=i.Matrix3.fromQuaternion(Q,b),J=i.Cartesian2.fromElements(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,N),q=i.Cartesian2.fromElements(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,P);let Z=t.length;const K=Z/3*2;for(let e=0;e<Z;e+=3){const n=e+1,r=e+2;let o,s=i.Cartesian3.fromArray(t,e,A);if(a.st){const t=i.Matrix3.multiplyByVector(W,s,x),e=Y.project(y.cartesianToCartographic(t,T),h);i.Cartesian3.subtract(e,H,e),_.x=(e.x+m)/(2*m),_.y=(e.y+p)/(2*p),J.x=Math.min(_.x,J.x),J.y=Math.min(_.y,J.y),q.x=Math.max(_.x,q.x),q.y=Math.max(_.y,q.y),F[j+K]=_.x,F[j+1+K]=_.y,F[j++]=_.x,F[j++]=_.y}s=y.scaleToGeodeticSurface(s,s),o=i.Cartesian3.clone(s,x),k=y.geodeticSurfaceNormal(s,k),L&&(R[e+Z]=-k.x,R[n+Z]=-k.y,R[r+Z]=-k.z);let l=i.Cartesian3.multiplyByScalar(k,d,g);if(s=i.Cartesian3.add(s,l,s),l=i.Cartesian3.multiplyByScalar(k,f,l),o=i.Cartesian3.add(o,l,o),a.position&&(V[e+Z]=o.x,V[n+Z]=o.y,V[r+Z]=o.z,V[e]=s.x,V[n]=s.y,V[r]=s.z),a.normal||a.tangent||a.bitangent){B=i.Cartesian3.clone(k,B);const l=i.Cartesian3.fromArray(t,(e+3)%Z,g);i.Cartesian3.subtract(l,s,l);const u=i.Cartesian3.subtract(o,s,h);k=i.Cartesian3.normalize(i.Cartesian3.cross(u,l,k),k),a.normal&&(D[e]=k.x,D[n]=k.y,D[r]=k.z,D[e+Z]=k.x,D[n+Z]=k.y,D[r+Z]=k.z),a.tangent&&(z=i.Cartesian3.normalize(i.Cartesian3.cross(B,k,z),z),O[e]=z.x,O[n]=z.y,O[r]=z.z,O[e+Z]=z.x,O[e+1+Z]=z.y,O[e+2+Z]=z.z),a.bitangent&&(S[e]=B.x,S[n]=B.y,S[r]=B.z,S[e+Z]=B.x,S[n+Z]=B.y,S[r+Z]=B.z)}}if(a.st){Z=F.length;for(let t=0;t<Z;t+=2)F[t]=(F[t]-J.x)/(q.x-J.x),F[t+1]=(F[t+1]-J.y)/(q.y-J.y)}const X=new u.GeometryAttributes;if(a.position&&(X.position=new l.GeometryAttribute({componentDatatype:r.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:V})),a.st&&(X.st=new l.GeometryAttribute({componentDatatype:r.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:F})),a.normal&&(X.normal=new l.GeometryAttribute({componentDatatype:r.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:D})),a.tangent&&(X.tangent=new l.GeometryAttribute({componentDatatype:r.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:O})),a.bitangent&&(X.bitangent=new l.GeometryAttribute({componentDatatype:r.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:S})),L&&(X.extrudeDirection=new l.GeometryAttribute({componentDatatype:r.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:R})),o.defined(n.offsetAttribute)){let t=new Uint8Array(v);if(n.offsetAttribute===c.GeometryOffsetAttribute.TOP)t=t.fill(1,0,v/2);else{const e=n.offsetAttribute===c.GeometryOffsetAttribute.NONE?0:1;t=t.fill(e)}X.applyOffset=new l.GeometryAttribute({componentDatatype:r.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:t})}return X}(L,t);k=function(t){const e=t.length/3,i=y.IndexDatatype.createTypedArray(e,6*e);let n=0;for(let t=0;t<e;t++){const r=t,o=t+e,a=(r+1)%e,s=a+e;i[n++]=r,i[n++]=o,i[n++]=a,i[n++]=a,i[n++]=o,i[n++]=s}return i}(L);const Q=y.IndexDatatype.createTypedArray(2*L.length/3,k),W=new l.Geometry({attributes:U,indices:Q,primitiveType:l.PrimitiveType.TRIANGLES}),J=p.GeometryPipeline.combineInstances([new m.GeometryInstance({geometry:H}),new m.GeometryInstance({geometry:W})]);return{boundingSphere:R,attributes:J[0].attributes,indices:J[0].indices}}function L(t,e,n,r,o,l,u){const m=a.EllipseGeometryLibrary.computeEllipsePositions({center:t,semiMajorAxis:e,semiMinorAxis:n,rotation:r,granularity:o},!1,!0).outerPositions,c=m.length/3,p=new Array(c);for(let t=0;t<c;++t)p[t]=i.Cartesian3.fromArray(m,3*t);const y=s.Rectangle.fromCartesianArray(p,l,u);return y.width>d.CesiumMath.PI&&(y.north=y.north>0?d.CesiumMath.PI_OVER_TWO-d.CesiumMath.EPSILON7:y.north,y.south=y.south<0?d.CesiumMath.EPSILON7-d.CesiumMath.PI_OVER_TWO:y.south,y.east=d.CesiumMath.PI,y.west=-d.CesiumMath.PI),y}function R(t){const e=(t=o.defaultValue(t,o.defaultValue.EMPTY_OBJECT)).center,n=o.defaultValue(t.ellipsoid,s.Ellipsoid.WGS84),r=t.semiMajorAxis,a=t.semiMinorAxis,l=o.defaultValue(t.granularity,d.CesiumMath.RADIANS_PER_DEGREE),u=o.defaultValue(t.vertexFormat,f.VertexFormat.DEFAULT),m=o.defaultValue(t.height,0),c=o.defaultValue(t.extrudedHeight,m);this._center=i.Cartesian3.clone(e),this._semiMajorAxis=r,this._semiMinorAxis=a,this._ellipsoid=s.Ellipsoid.clone(n),this._rotation=o.defaultValue(t.rotation,0),this._stRotation=o.defaultValue(t.stRotation,0),this._height=Math.max(c,m),this._granularity=l,this._vertexFormat=f.VertexFormat.clone(u),this._extrudedHeight=Math.min(c,m),this._shadowVolume=o.defaultValue(t.shadowVolume,!1),this._workerName="createEllipseGeometry",this._offsetAttribute=t.offsetAttribute,this._rectangle=void 0,this._textureCoordinateRotationPoints=void 0}R.packedLength=i.Cartesian3.packedLength+s.Ellipsoid.packedLength+f.VertexFormat.packedLength+9,R.pack=function(t,e,n){return n=o.defaultValue(n,0),i.Cartesian3.pack(t._center,e,n),n+=i.Cartesian3.packedLength,s.Ellipsoid.pack(t._ellipsoid,e,n),n+=s.Ellipsoid.packedLength,f.VertexFormat.pack(t._vertexFormat,e,n),n+=f.VertexFormat.packedLength,e[n++]=t._semiMajorAxis,e[n++]=t._semiMinorAxis,e[n++]=t._rotation,e[n++]=t._stRotation,e[n++]=t._height,e[n++]=t._granularity,e[n++]=t._extrudedHeight,e[n++]=t._shadowVolume?1:0,e[n]=o.defaultValue(t._offsetAttribute,-1),e};const j=new i.Cartesian3,k=new s.Ellipsoid,z=new f.VertexFormat,B={center:j,ellipsoid:k,vertexFormat:z,semiMajorAxis:void 0,semiMinorAxis:void 0,rotation:void 0,stRotation:void 0,height:void 0,granularity:void 0,extrudedHeight:void 0,shadowVolume:void 0,offsetAttribute:void 0};R.unpack=function(t,e,n){e=o.defaultValue(e,0);const r=i.Cartesian3.unpack(t,e,j);e+=i.Cartesian3.packedLength;const a=s.Ellipsoid.unpack(t,e,k);e+=s.Ellipsoid.packedLength;const l=f.VertexFormat.unpack(t,e,z);e+=f.VertexFormat.packedLength;const u=t[e++],m=t[e++],c=t[e++],p=t[e++],y=t[e++],d=t[e++],A=t[e++],x=1===t[e++],h=t[e];return o.defined(n)?(n._center=i.Cartesian3.clone(r,n._center),n._ellipsoid=s.Ellipsoid.clone(a,n._ellipsoid),n._vertexFormat=f.VertexFormat.clone(l,n._vertexFormat),n._semiMajorAxis=u,n._semiMinorAxis=m,n._rotation=c,n._stRotation=p,n._height=y,n._granularity=d,n._extrudedHeight=A,n._shadowVolume=x,n._offsetAttribute=-1===h?void 0:h,n):(B.height=y,B.extrudedHeight=A,B.granularity=d,B.stRotation=p,B.rotation=c,B.semiMajorAxis=u,B.semiMinorAxis=m,B.shadowVolume=x,B.offsetAttribute=-1===h?void 0:h,new R(B))},R.computeRectangle=function(t,e){const i=(t=o.defaultValue(t,o.defaultValue.EMPTY_OBJECT)).center,n=o.defaultValue(t.ellipsoid,s.Ellipsoid.WGS84),r=t.semiMajorAxis,a=t.semiMinorAxis,l=o.defaultValue(t.granularity,d.CesiumMath.RADIANS_PER_DEGREE);return L(i,r,a,o.defaultValue(t.rotation,0),l,n,e)},R.createGeometry=function(t){if(t._semiMajorAxis<=0||t._semiMinorAxis<=0)return;const n=t._height,s=t._extrudedHeight,u=!d.CesiumMath.equalsEpsilon(n,s,0,d.CesiumMath.EPSILON2);t._center=t._ellipsoid.scaleToGeodeticSurface(t._center,t._center);const m={center:t._center,semiMajorAxis:t._semiMajorAxis,semiMinorAxis:t._semiMinorAxis,ellipsoid:t._ellipsoid,rotation:t._rotation,height:n,granularity:t._granularity,vertexFormat:t._vertexFormat,stRotation:t._stRotation};let p;if(u)m.extrudedHeight=s,m.shadowVolume=t._shadowVolume,m.offsetAttribute=t._offsetAttribute,p=S(m);else if(p=function(t){const n=t.center;F=i.Cartesian3.multiplyByScalar(t.ellipsoid.geodeticSurfaceNormal(n,F),t.height,F),F=i.Cartesian3.add(n,F,F);const r=new e.BoundingSphere(F,t.semiMajorAxis),o=a.EllipseGeometryLibrary.computeEllipsePositions(t,!0,!1),s=o.positions,l=o.numPts,u=v(s,t,!1);let m=V(l);return m=y.IndexDatatype.createTypedArray(s.length/3,m),{boundingSphere:r,attributes:u,indices:m}}(m),o.defined(t._offsetAttribute)){const e=p.attributes.position.values.length,i=t._offsetAttribute===c.GeometryOffsetAttribute.NONE?0:1,n=new Uint8Array(e/3).fill(i);p.attributes.applyOffset=new l.GeometryAttribute({componentDatatype:r.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:n})}return new l.Geometry({attributes:p.attributes,indices:p.indices,primitiveType:l.PrimitiveType.TRIANGLES,boundingSphere:p.boundingSphere,offsetAttribute:t._offsetAttribute})},R.createShadowVolume=function(t,e,i){const n=t._granularity,r=t._ellipsoid,o=e(n,r),a=i(n,r);return new R({center:t._center,semiMajorAxis:t._semiMajorAxis,semiMinorAxis:t._semiMinorAxis,ellipsoid:r,rotation:t._rotation,stRotation:t._stRotation,granularity:n,extrudedHeight:o,height:a,vertexFormat:f.VertexFormat.POSITION_ONLY,shadowVolume:!0})},Object.defineProperties(R.prototype,{rectangle:{get:function(){return o.defined(this._rectangle)||(this._rectangle=L(this._center,this._semiMajorAxis,this._semiMinorAxis,this._rotation,this._granularity,this._ellipsoid)),this._rectangle}},textureCoordinateRotationPoints:{get:function(){return o.defined(this._textureCoordinateRotationPoints)||(this._textureCoordinateRotationPoints=function(t){const e=-t._stRotation;if(0===e)return[0,0,0,1,1,0];const n=a.EllipseGeometryLibrary.computeEllipsePositions({center:t._center,semiMajorAxis:t._semiMajorAxis,semiMinorAxis:t._semiMinorAxis,rotation:t._rotation,granularity:t._granularity},!1,!0).outerPositions,r=n.length/3,o=new Array(r);for(let t=0;t<r;++t)o[t]=i.Cartesian3.fromArray(n,3*t);const s=t._ellipsoid,u=t.rectangle;return l.Geometry._textureCoordinateRotationPoints(o,e,s,u)}(this)),this._textureCoordinateRotationPoints}}}),t.EllipseGeometry=R}));
