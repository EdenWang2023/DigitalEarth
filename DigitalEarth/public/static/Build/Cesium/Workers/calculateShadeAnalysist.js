/**
 * @license
 * Cesium - https://github.com/CesiumGS/cesium
 * Version 1.96
 *
 * Copyright 2011-2022 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/CesiumGS/cesium/blob/main/LICENSE.md for full licensing details.
 */
define(["./createTaskProcessorWorker","./Matrix4-d3db9505","./Math-5b6faca9","./IntersectionTests-3ac7f0c9","./defined-b681f02d","./Check-436535f3","./AttributeCompression-055d015a","./TerrainQuantization-3ae29896","./RuntimeError-14317824","./Interval-49d6e8fc","./ComponentDatatype-46a1cf7a","./WebGLConstants-f100e3dd","./Matrix2-7384588e"],(function(a,e,t,i,r,n,s,o,h,u,d,C,c){"use strict";var m=self.postMessage,l=[],f=-90,M=1,g=new e.Cartesian3;function v(a,t,i,r,n){for(var s=[],o=n.length/a,h=r*o,u=0;u<o;u++){t[u];var d=n[h+o-1-u];d=e.Matrix4.multiplyByVector(i,new e.Cartesian4(d.x,d.y,d.z,1),new e.Cartesian3),t[u].mPitchPoint=e.Cartesian3.fromCartesian4(d),s.push(t[u])}return s}function p(a,i,n,s,o){for(var h,u,d=[],C=e.Cartographic.fromCartesian(n),c=e.Cartographic.fromCartesian(s),m=t.CesiumMath.toDegrees(C.longitude),l=t.CesiumMath.toDegrees(C.latitude),M=t.CesiumMath.toDegrees(c.longitude),g=t.CesiumMath.toDegrees(c.latitude),v=i.length-1;v>=0&&(u=y(a,C,i[v]),!r.defined(u));v--);var p=new e.Cartesian3.fromDegrees(m,l,u);d=[{mPitchAngle:-90,mPitchPoint:(h=w(a,i,o,m,l,M,g,!0))[0]}];for(var P=e.Cartesian3.normalize(new e.Cartesian3(-p.x,-p.y,-p.z)),x=0;x<o;x++){var z=e.Cartesian3.subtract(h[o-x],p);if(0!=z.x&&0!=z.y&&0!=z.z){var R=e.Cartesian3.normalize(z),b=e.Cartesian3.dot(P,R),T=t.CesiumMath.toDegrees(Math.acos(b))-90;T>f&&(d.push({mPitchAngle:T,mPitchPoint:h[o-x]}),f=T)}}return d}function P(a,i,r,n,s,o,h,u){for(var d=o.length,C=0;C<d-1;C++){var c=e.Cartesian3.normalize(new e.Cartesian3(-h.x,-h.y,-h.z)),m=e.Cartesian3.subtract(o[C+1].mPitchPoint,h);if(0!=m.x&&0!=m.y&&0!=m.z){var M=e.Cartesian3.normalize(m),g=t.CesiumMath.toDegrees(Math.acos(e.Cartesian3.dot(c,M)))-90,v=o[C+1].mPitchPoint;if(g>=f);else for(var p=-100,P=-1,w=-1,y=500,z=s.length,R=0;R<z-1;R++)if(s[R].mPitchAngle>=g?s[R].mPitchAngle<y&&(y=s[R].mPitchAngle,w=R):s[R].mPitchAngle>p&&(p=s[R].mPitchAngle,P=R),-1!=w&&-1!=P){for(var b=e.Cartesian3.subtract(v,h),T=x(i,r,n,h,s[w].mPitchPoint,s[P].mPitchPoint,g,M),A=1e8,D=0,S=0;S<T.length;S++){var _=T[S],q=e.Cartographic.fromCartesian(_.vector).height,E=Math.abs(_.linePTHeight-q);E<A&&(A=E,D=S)}var N=T[D],V=e.Cartographic.fromCartesian(N.vector);V.height=N.linePTHeight;var I=e.Cartographic.toCartesian(V),O=e.Cartesian3.distance(I,h)/e.Cartesian3.magnitude(b);O>1&&(O=1),O<0&&(O=1e-5),l[a+d-C-2].powerScale=O,l[a+d-C-2].verticalAngle=g}}}}function w(a,i,n,s,o,h,u,d){for(var C=[],c=function(a,e,i,r){var n=t.CesiumMath.toRadians(r,e),s=t.CesiumMath.toRadians(i,a),o=Math.sin(.5*s),h=Math.sin(.5*n),u=o*o+Math.cos(t.CesiumMath.toRadians(a))*Math.cos(t.CesiumMath.toRadians(i))*h*h;return 2*Math.asin(Math.min(1,Math.sqrt(u)))}(o,s,u,h),m=Math.sin(c),l=Math.cos(t.CesiumMath.toRadians(o)),f=Math.cos(t.CesiumMath.toRadians(u)),M=0;M<=n;M++){var g=M/n,v=Math.sin((1-g)*c)/m,p=Math.sin(g*c)/m,P=v*l*Math.cos(t.CesiumMath.toRadians(s))+p*f*Math.cos(t.CesiumMath.toRadians(h)),w=v*l*Math.sin(t.CesiumMath.toRadians(s))+p*f*Math.sin(t.CesiumMath.toRadians(h)),x=v*Math.sin(t.CesiumMath.toRadians(o))+p*Math.sin(t.CesiumMath.toRadians(u)),z=t.CesiumMath.toDegrees(Math.atan2(x,Math.sqrt(P*P+w*w))),R=t.CesiumMath.toDegrees(Math.atan2(w,P)),b=0;if(d)for(var T=i.length-1;T>=0&&(b=y(a,new e.Cartographic(t.CesiumMath.toRadians(R),t.CesiumMath.toRadians(z)),i[T]),!r.defined(b));T--);C.push(new e.Cartesian3.fromDegrees(R,z,b))}return C}function x(a,i,r,n,s,o,h,u){var d=[];e.Cartesian3.distance(s,o);for(var C=e.Cartographic.fromCartesian(s),c=e.Cartographic.fromCartesian(o),m=w(a,i,r,t.CesiumMath.toDegrees(C.longitude),t.CesiumMath.toDegrees(C.latitude),t.CesiumMath.toDegrees(c.longitude),t.CesiumMath.toDegrees(c.latitude),!0),l=0;l<m.length;l++){var f={},M=e.Cartesian3.distance(m[l],n)/Math.cos(t.CesiumMath.toRadians(h)),g=e.Cartesian3.add(n,e.Cartesian3.multiplyByScalar(u,M,new e.Cartesian3)),v=e.Cartographic.fromCartesian(g);f.linePTHeight=v.height,f.vector=m[l],d.push(f)}return d}function y(a,s,o){var h=e.Cartesian3.fromRadians(s.longitude,s.latitude),u=new i.Ray;z(h,a,u.direction),function(a,i,s,o){if(!t.CesiumMath.equalsEpsilon(a._radii.x,a._radii.y,t.CesiumMath.EPSILON15))throw new n.DeveloperError("Ellipsoid must be an ellipsoid of revolution (radii.x == radii.y)");n.Check.typeOf.number.greaterThan("Ellipsoid.radii.z",a._radii.z,0),s=r.defaultValue(s,0);var h=a._squaredXOverSquaredZ;r.defined(o)||(o=new e.Cartesian3);if(o.x=0,o.y=0,o.z=i.z*(1-h),Math.abs(o.z)>=a._radii.z-s)return}(a,h,11500,u.origin);var d=function(a,t){if(!r.defined(t))return;for(var n=t.vertices,s=t.indices,o=t.encoding,h=s.length,u=Number.MAX_VALUE,d=0;d<h;d+=3){var C=s[d],c=s[d+1],m=s[d+2],l=R(o,void 0,void 0,n,C,new e.Cartesian3),f=R(o,void 0,void 0,n,c,new e.Cartesian3),M=R(o,void 0,void 0,n,m,new e.Cartesian3),g=i.IntersectionTests.rayTriangleParametric(a,l,f,M,!1);r.defined(g)&&g<u&&g>=0&&(u=g)}return u!==Number.MAX_VALUE?i.Ray.getPoint(a,u,new e.Cartesian3):void 0}(u,o);if(r.defined(d))return function(a,i,n){var s=e.scaleToGeodeticSurface(i,a._oneOverRadii,a._oneOverRadiiSquared,a._centerToleranceSquared,new e.Cartesian3);if(!r.defined(s))return;var o=z(s,a),h=e.Cartesian3.subtract(i,s),u=Math.atan2(o.y,o.x),d=Math.asin(o.z),C=t.CesiumMath.sign(e.Cartesian3.dot(h,i))*e.Cartesian3.magnitude(h);if(!r.defined(n))return new e.Cartographic(u,d,C);return n.longitude=u,n.latitude=d,n.height=C,n}(a,d,new e.Cartographic).height}function z(a,t,i){return r.defined(i)||(i=new e.Cartesian3),i=e.Cartesian3.multiplyComponents(a,t._oneOverRadiiSquared,i),e.Cartesian3.normalize(i,i)}function R(a,t,i,n,h,u){return function(a,t,i,n){r.defined(n)||(n=new e.Cartesian3);if(i*=function(a){var e;if(a.quantization===o.TerrainQuantization.BITS12)e=3;else e=6;a.hasWebMercatorT&&++e;a.hasVertexNormals&&++e;return e}(a),a.quantization===o.TerrainQuantization.BITS12){var h=s.AttributeCompression.decompressTextureCoordinates(t[i],new e.Cartesian2);n.x=h.x,n.y=h.y;var u=s.AttributeCompression.decompressTextureCoordinates(t[i+1],new e.Cartesian2);return n.z=u.x,e.Matrix4.multiplyByPoint(a.fromScaledENU,n,n)}n.x=t[i],n.y=t[i+1],n.z=t[i+2],e.Cartesian3.add(n,a.center,n)}(a,n,h,u),u}return a((function(a){var e=a.count,t=a.index,i=a.taskNum,r=a.sectionPoints,n=a.modelMatrix,s=a.ellipsoid,o=a.tileMesh,h=a.radarPosition,u=a.splitNum,d=(e-1)/i,C=(e-1)/i;t==i-1&&(d+=1);for(var c=a.vertexVector,w=c.length/e,x=0;x<d;x++){for(var y=v(e,r,n,x+t*C,c),z=y.length,R=0;R<z;R++){var b=y[R].mPitchAngle,T={};T.verticalAngle=b,T.powerScale=1,l.push(T)}M-2>z&&(M/=5),g=y[M].mPitchPoint,f=-90,P(x*w,s,o,u,p(s,o,h,g,u),y,h)}m({index:t,mpScaleVectorList:l})}))}));
