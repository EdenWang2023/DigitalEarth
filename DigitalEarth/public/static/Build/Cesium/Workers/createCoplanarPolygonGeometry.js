/**
 * @license
 * Cesium - https://github.com/CesiumGS/cesium
 * Version 1.96
 *
 * Copyright 2011-2022 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/CesiumGS/cesium/blob/main/LICENSE.md for full licensing details.
 */
define(["./arrayRemoveDuplicates-bbac3e0e","./BoundingRectangle-3739fff5","./Transforms-99c89742","./Matrix4-d3db9505","./Check-436535f3","./ComponentDatatype-46a1cf7a","./CoplanarPolygonGeometryLibrary-ae7df4a1","./defined-b681f02d","./Rectangle-0610a1c7","./GeometryAttribute-ef6ca9ab","./GeometryAttributes-18ccc0d6","./GeometryInstance-458833d1","./GeometryPipeline-7151dba5","./IndexDatatype-1b44a4e6","./Math-5b6faca9","./PolygonGeometryLibrary-681888dc","./PolygonPipeline-5a6c6b44","./VertexFormat-1359575c","./Interval-49d6e8fc","./_commonjsHelpers-a32ac251","./combine-8b9ba6cb","./RequestType-e53aab71","./RuntimeError-14317824","./WebGLConstants-f100e3dd","./OrientedBoundingBox-4ee28786","./EllipsoidTangentPlane-34e5c0ac","./AxisAlignedBoundingBox-321a482b","./IntersectionTests-3ac7f0c9","./Plane-172c23d7","./Matrix2-7384588e","./AttributeCompression-055d015a","./EncodedCartesian3-e8f321af","./ArcType-f5af12f9","./EllipsoidRhumbLine-65d4aeca"],(function(e,t,n,o,a,r,i,s,l,c,y,p,d,u,m,g,f,b,C,h,x,P,A,L,w,G,F,v,E,_,T,k,D,V){"use strict";const R=new o.Cartesian3,H=new t.BoundingRectangle,I=new o.Cartesian2,M=new o.Cartesian2,B=new o.Cartesian3,O=new o.Cartesian3,z=new o.Cartesian3,S=new o.Cartesian3,N=new o.Cartesian3,Q=new o.Cartesian3,j=new n.Quaternion,q=new o.Matrix3,U=new o.Matrix3,Y=new o.Cartesian3;function J(e,t,a,i,l,p,d,g,b){const C=e.positions;let h=f.PolygonPipeline.triangulate(e.positions2D,e.holes);h.length<3&&(h=[0,1,2]);const x=u.IndexDatatype.createTypedArray(C.length,h.length);x.set(h);let P=q;if(0!==i){let e=n.Quaternion.fromAxisAngle(d,i,j);if(P=o.Matrix3.fromQuaternion(e,P),t.tangent||t.bitangent){e=n.Quaternion.fromAxisAngle(d,-i,j);const a=o.Matrix3.fromQuaternion(e,U);g=o.Cartesian3.normalize(o.Matrix3.multiplyByVector(a,g,g),g),t.bitangent&&(b=o.Cartesian3.normalize(o.Cartesian3.cross(d,g,b),b))}}else P=o.Matrix3.clone(o.Matrix3.IDENTITY,P);const A=M;t.st&&(A.x=a.x,A.y=a.y);const L=C.length,w=3*L,G=new Float64Array(w),F=t.normal?new Float32Array(w):void 0,v=t.tangent?new Float32Array(w):void 0,E=t.bitangent?new Float32Array(w):void 0,_=t.st?new Float32Array(2*L):void 0;let T=0,k=0,D=0,V=0,H=0;for(let e=0;e<L;e++){const n=C[e];if(G[T++]=n.x,G[T++]=n.y,G[T++]=n.z,t.st)if(s.defined(l)&&l.positions.length===L)_[H++]=l.positions[e].x,_[H++]=l.positions[e].y;else{const e=p(o.Matrix3.multiplyByVector(P,n,R),I);o.Cartesian2.subtract(e,A,e);const t=m.CesiumMath.clamp(e.x/a.width,0,1),r=m.CesiumMath.clamp(e.y/a.height,0,1);_[H++]=t,_[H++]=r}t.normal&&(F[k++]=d.x,F[k++]=d.y,F[k++]=d.z),t.tangent&&(v[V++]=g.x,v[V++]=g.y,v[V++]=g.z),t.bitangent&&(E[D++]=b.x,E[D++]=b.y,E[D++]=b.z)}const B=new y.GeometryAttributes;return t.position&&(B.position=new c.GeometryAttribute({componentDatatype:r.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:G})),t.normal&&(B.normal=new c.GeometryAttribute({componentDatatype:r.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:F})),t.tangent&&(B.tangent=new c.GeometryAttribute({componentDatatype:r.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:v})),t.bitangent&&(B.bitangent=new c.GeometryAttribute({componentDatatype:r.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:E})),t.st&&(B.st=new c.GeometryAttribute({componentDatatype:r.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:_})),new c.Geometry({attributes:B,indices:x,primitiveType:c.PrimitiveType.TRIANGLES})}function W(e){const t=(e=s.defaultValue(e,s.defaultValue.EMPTY_OBJECT)).polygonHierarchy,n=e.textureCoordinates,a=s.defaultValue(e.vertexFormat,b.VertexFormat.DEFAULT);this._vertexFormat=b.VertexFormat.clone(a),this._polygonHierarchy=t,this._stRotation=s.defaultValue(e.stRotation,0),this._ellipsoid=l.Ellipsoid.clone(s.defaultValue(e.ellipsoid,l.Ellipsoid.WGS84)),this._workerName="createCoplanarPolygonGeometry",this._textureCoordinates=n,this.packedLength=g.PolygonGeometryLibrary.computeHierarchyPackedLength(t,o.Cartesian3)+b.VertexFormat.packedLength+l.Ellipsoid.packedLength+(s.defined(n)?g.PolygonGeometryLibrary.computeHierarchyPackedLength(n,o.Cartesian2):1)+2}W.fromPositions=function(e){return new W({polygonHierarchy:{positions:(e=s.defaultValue(e,s.defaultValue.EMPTY_OBJECT)).positions},vertexFormat:e.vertexFormat,stRotation:e.stRotation,ellipsoid:e.ellipsoid,textureCoordinates:e.textureCoordinates})},W.pack=function(e,t,n){return n=s.defaultValue(n,0),n=g.PolygonGeometryLibrary.packPolygonHierarchy(e._polygonHierarchy,t,n,o.Cartesian3),l.Ellipsoid.pack(e._ellipsoid,t,n),n+=l.Ellipsoid.packedLength,b.VertexFormat.pack(e._vertexFormat,t,n),n+=b.VertexFormat.packedLength,t[n++]=e._stRotation,s.defined(e._textureCoordinates)?n=g.PolygonGeometryLibrary.packPolygonHierarchy(e._textureCoordinates,t,n,o.Cartesian2):t[n++]=-1,t[n++]=e.packedLength,t};const Z=l.Ellipsoid.clone(l.Ellipsoid.UNIT_SPHERE),K=new b.VertexFormat,X={polygonHierarchy:{}};return W.unpack=function(e,t,n){t=s.defaultValue(t,0);const a=g.PolygonGeometryLibrary.unpackPolygonHierarchy(e,t,o.Cartesian3);t=a.startingIndex,delete a.startingIndex;const r=l.Ellipsoid.unpack(e,t,Z);t+=l.Ellipsoid.packedLength;const i=b.VertexFormat.unpack(e,t,K);t+=b.VertexFormat.packedLength;const c=e[t++],y=-1===e[t]?void 0:g.PolygonGeometryLibrary.unpackPolygonHierarchy(e,t,o.Cartesian2);s.defined(y)?(t=y.startingIndex,delete y.startingIndex):t++;const p=e[t++];return s.defined(n)||(n=new W(X)),n._polygonHierarchy=a,n._ellipsoid=l.Ellipsoid.clone(r,n._ellipsoid),n._vertexFormat=b.VertexFormat.clone(i,n._vertexFormat),n._stRotation=c,n._textureCoordinates=y,n.packedLength=p,n},W.createGeometry=function(t){const a=t._vertexFormat,r=t._polygonHierarchy,l=t._stRotation,y=t._textureCoordinates,f=s.defined(y);let b=r.positions;if(b=e.arrayRemoveDuplicates(b,o.Cartesian3.equalsEpsilon,!0),b.length<3)return;let C=B,h=O,x=z,P=N;const A=Q;if(!i.CoplanarPolygonGeometryLibrary.computeProjectTo2DArguments(b,S,P,A))return;if(C=o.Cartesian3.cross(P,A,C),C=o.Cartesian3.normalize(C,C),!o.Cartesian3.equalsEpsilon(S,o.Cartesian3.ZERO,m.CesiumMath.EPSILON6)){const e=t._ellipsoid.geodeticSurfaceNormal(S,Y);o.Cartesian3.dot(C,e)<0&&(C=o.Cartesian3.negate(C,C),P=o.Cartesian3.negate(P,P))}const L=i.CoplanarPolygonGeometryLibrary.createProjectPointsTo2DFunction(S,P,A),w=i.CoplanarPolygonGeometryLibrary.createProjectPointTo2DFunction(S,P,A);a.tangent&&(h=o.Cartesian3.clone(P,h)),a.bitangent&&(x=o.Cartesian3.clone(A,x));const G=g.PolygonGeometryLibrary.polygonsFromHierarchy(r,f,L,!1),F=G.hierarchy,v=G.polygons,E=f?g.PolygonGeometryLibrary.polygonsFromHierarchy(y,!0,(function(e){return e}),!1).polygons:void 0;if(0===F.length)return;b=F[0].outerRing;const _=n.BoundingSphere.fromPoints(b),T=g.PolygonGeometryLibrary.computeBoundingRectangle(C,w,b,l,H),k=[];for(let e=0;e<v.length;e++){const t=new p.GeometryInstance({geometry:J(v[e],a,T,l,f?E[e]:void 0,w,C,h,x)});k.push(t)}const D=d.GeometryPipeline.combineInstances(k)[0];D.attributes.position.values=new Float64Array(D.attributes.position.values),D.indices=u.IndexDatatype.createTypedArray(D.attributes.position.values.length/3,D.indices);const V=D.attributes;return a.position||delete V.position,new c.Geometry({attributes:V,indices:D.indices,primitiveType:D.primitiveType,boundingSphere:_})},function(e,t){return s.defined(t)&&(e=W.unpack(e,t)),W.createGeometry(e)}}));
